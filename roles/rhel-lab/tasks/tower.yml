---
- name: Check if Tower is already installed
  ansible.builtin.stat:
    path: /bin/ansible-tower-service
  register: tower_service

- name: Ensure /opt/tower is created
  ansible.builtin.file:
    path: /opt/tower
    state: directory

- name: Unzip the latest tower software
  ansible.builtin.unarchive:
    src: "https://releases.ansible.com/ansible-tower/setup/ansible-tower-setup-latest.tar.gz"
    dest: /opt/tower
    remote_src: yes
  when: tower_service.stat.exists == False

- name: Find installer absolute path
  ansible.builtin.shell: "ls /opt/tower/ansible-tower-setup-*/setup.sh"
  register: tower_installer_path

- name: Find base path for installer
  ansible.builtin.shell: "find /opt/tower/ansible-tower-setup* -maxdepth 0 -type d"
  register: tower_base_path

- name: Find inventory absolute path
  ansible.builtin.shell: "ls /opt/tower/ansible-tower-setup-*/inventory"
  register: tower_inventory_path

- name: Create tower install inventory
  ansible.builtin.template:
    src: tower-inventory.j2
    dest: "{{ tower_inventory_path.stdout }}"
    owner: root
    group: root
    mode: 0600
  when: tower_service.stat.exists == False

- name: Run Ansible Tower installer
  ansible.builtin.shell:
    cmd: "{{ tower_installer_path.stdout }} -i {{ tower_inventory_path.stdout }}"
    chdir: "{{ tower_base_path.stdout }}"
  when: tower_service.stat.exists == False

#- name: Check if Tower CLI is installed
#  ansible.builtin.stat:
#    path: /bin/tower-cli
#  register: tower_cli
#
#- name: Install Tower CLI
#  ansible.builtin.pip:
#    name: ansible-tower-cli
#    state: present
#  when: tower_cli.stat.exists == False
#
#- name: Restart Ansible Tower
#  ansible.builtin.shell: ansible-tower-service restart
#
